<?php

namespace Fsb\AppointmentBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
/**
 * AppointmentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AppointmentRepository extends EntityRepository
{
	/**
	 * Get The appointments of a recruiter and in a particular month
	 *
	 * @param int $recruiter_id
	 * @param int $month
	 * @param int $year
	 * 
	 * @return array Appointments
	 */
	public function findNumAppointmentsByRecruiterAndByMonth($recruiter_id,$month,$year){
	
		$em = $this->getEntityManager();
	
		$dql = 'SELECT SUBSTRING(a.startDate, 9, 2) AS day, COUNT(a.id) AS numapp 
					FROM AppointmentBundle:Appointment a
					WHERE 
						a.recruiter = :recruiter_id AND
						SUBSTRING(a.startDate, 6, 2) = :month AND
						SUBSTRING(a.startDate, 1, 4) = :year
					GROUP BY day
					ORDER BY a.startDate ASC';
	
		$query = $em->createQuery($dql);
		$query->setParameter('recruiter_id', $recruiter_id);
		$query->setParameter('month', (int)$month);
		$query->setParameter('year', (int)$year);
		
		$recruiter_ar = $query->getResult();
	
		return $recruiter_ar;
	}
	
	/**
	 * Get The appointments of a recruiter and in a particular day
	 *
	 * @param int $recruiter_id
	 * @param $day
	 * @param int $month
	 * @param int $year
	 *
	 * @return array Appointments
	 */
	public function findAppointmentsByRecruiterAndByDay($recruiter_id,$day,$month,$year){
	
		$em = $this->getEntityManager();
	
		$dql = 'SELECT
					SUBSTRING(a.startDate, 11, 3) AS hour, 
					SUBSTRING(a.startDate, 15, 2) AS minute,
					a.id, ad.title, 
					ad.comment,
					r.coname as record,
					ud.firstname as recruiter,
					p.name as project,
					o.name as outcome,
					ad.outcomeReason
					FROM AppointmentBundle:Appointment a
					JOIN a.appointmentDetail ad
					JOIN ad.project p
					JOIN ad.outcome o
					JOIN a.record r
					JOIN a.recruiter u
					JOIN u.userDetail ud
					WHERE
						a.recruiter = :recruiter_id AND
						SUBSTRING(a.startDate, 9, 2) = :day AND
						SUBSTRING(a.startDate, 6, 2) = :month AND
						SUBSTRING(a.startDate, 1, 4) = :year
					ORDER BY a.startDate ASC';
	
		$query = $em->createQuery($dql);
		$query->setParameter('recruiter_id', $recruiter_id);
		$query->setParameter('day', (int)$day);
		$query->setParameter('month', (int)$month);
		$query->setParameter('year', (int)$year);
	
		$recruiter_ar = $query->getResult();
	
		return $recruiter_ar;
	}
	
	/**
	 * Get The appointments of a recruiter and since a particular day
	 *
	 * @param int $recruiter_id
	 * @param $day
	 * @param int $month
	 * @param int $year
	 *
	 * @return array Appointments
	 */
	public function findAppointmentsByRecruiterFromDay($recruiter_id,$day,$month,$year){
	
		$em = $this->getEntityManager();
	
		$dql = 'SELECT
					a.startDate as date, a.id, ad.title, ad.comment,
					r.coname as record,
					ud.firstname as recruiter,
					p.name as project,
					o.name as outcome,
					ad.outcomeReason
					FROM AppointmentBundle:Appointment a
					JOIN a.appointmentDetail ad
					JOIN ad.project p
					JOIN ad.outcome o
					JOIN a.record r
					JOIN a.recruiter u
					JOIN u.userDetail ud
					WHERE
						a.recruiter = :recruiter_id AND
						a.startDate > :date
					ORDER BY a.startDate ASC';
	
		$query = $em->createQuery($dql);
		$query->setParameter('recruiter_id', $recruiter_id);
		$query->setParameter('date', new \DateTime($year.'-'.$month.'-'.$day.' 00:00:00'));
	
		$recruiter_ar = $query->getResult();
	
		return $recruiter_ar;
	}
}
